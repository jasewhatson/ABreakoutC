#Generated by anthropic.claude-3-5-sonnet-20241022-v2:0

import pygame
import random

# Initialize Pygame
pygame.init()

# Colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
COLORS = [
    (0, 255, 255),  # Cyan
    (255, 255, 0),  # Yellow
    (128, 0, 128),  # Purple
    (0, 255, 0),    # Green
    (255, 0, 0),    # Red
    (0, 0, 255),    # Blue
    (255, 127, 0)   # Orange
]

# Game dimensions
BLOCK_SIZE = 30
GRID_WIDTH = 10
GRID_HEIGHT = 20
SCREEN_WIDTH = BLOCK_SIZE * (GRID_WIDTH + 6)
SCREEN_HEIGHT = BLOCK_SIZE * GRID_HEIGHT

# Initialize screen
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Tetris")

# Tetromino shapes
SHAPES = [
    [[1, 1, 1, 1]],  # I
    [[1, 1], [1, 1]],  # O
    [[1, 1, 1], [0, 1, 0]],  # T
    [[1, 1, 1], [1, 0, 0]],  # L
    [[1, 1, 1], [0, 0, 1]],  # J
    [[1, 1, 0], [0, 1, 1]],  # S
    [[0, 1, 1], [1, 1, 0]]   # Z
]

class Tetromino:
    def __init__(self):
        self.shape = random.choice(SHAPES)
        self.color = random.choice(COLORS)
        self.x = GRID_WIDTH // 2 - len(self.shape[0]) // 2
        self.y = 0

    def rotate(self):
        self.shape = list(zip(*self.shape[::-1]))

def create_grid():
    return [[BLACK for _ in range(GRID_WIDTH)] for _ in range(GRID_HEIGHT)]

def valid_move(grid, tetromino, x_offset=0, y_offset=0):
    for y, row in enumerate(tetromino.shape):
        for x, cell in enumerate(row):
            if cell:
                new_x = tetromino.x + x + x_offset
                new_y = tetromino.y + y + y_offset
                
                if (new_x < 0 or new_x >= GRID_WIDTH or 
                    new_y >= GRID_HEIGHT or 
                    (new_y >= 0 and grid[new_y][new_x] != BLACK)):
                    return False
    return True

def merge_tetromino(grid, tetromino):
    for y, row in enumerate(tetromino.shape):
        for x, cell in enumerate(row):
            if cell:
                grid[tetromino.y + y][tetromino.x + x] = tetromino.color
    return grid

def clear_lines(grid):
    lines_cleared = 0
    for y in range(GRID_HEIGHT):
        if all(cell != BLACK for cell in grid[y]):
            del grid[y]
            grid.insert(0, [BLACK for _ in range(GRID_WIDTH)])
            lines_cleared += 1
    return lines_cleared

def main():
    clock = pygame.time.Clock()
    grid = create_grid()
    current_piece = Tetromino()
    fall_time = 0
    fall_speed = 500  # milliseconds
    score = 0

    running = True
    while running:
        fall_time += clock.get_rawtime()
        clock.tick()

        if fall_time >= fall_speed:
            if valid_move(grid, current_piece, y_offset=1):
                current_piece.y += 1
            else:
                grid = merge_tetromino(grid, current_piece)
                score += clear_lines(grid) * 100
                current_piece = Tetromino()
                if not valid_move(grid, current_piece):
                    running = False
            fall_time = 0

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_LEFT:
                    if valid_move(grid, current_piece, x_offset=-1):
                        current_piece.x -= 1
                if event.key == pygame.K_RIGHT:
                    if valid_move(grid, current_piece, x_offset=1):
                        current_piece.x += 1
                if event.key == pygame.K_DOWN:
                    if valid_move(grid, current_piece, y_offset=1):
                        current_piece.y += 1
                if event.key == pygame.K_UP:
                    original_shape = current_piece.shape
                    current_piece.rotate()
                    if not valid_move(grid, current_piece):
                        current_piece.shape = original_shape

        screen.fill(BLACK)

        # Draw grid
        for y, row in enumerate(grid):
            for x, color in enumerate(row):
                pygame.draw.rect(screen, color,
                               [x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE - 1, BLOCK_SIZE - 1])

        # Draw current piece
        for y, row in enumerate(current_piece.shape):
            for x, cell in enumerate(row):
                if cell:
                    pygame.draw.rect(screen, current_piece.color,
                                   [(current_piece.x + x) * BLOCK_SIZE,
                                    (current_piece.y + y) * BLOCK_SIZE,
                                    BLOCK_SIZE - 1, BLOCK_SIZE - 1])

        # Draw score
        font = pygame.font.Font(None, 36)
        score_text = font.render(f'Score: {score}', True, WHITE)
        screen.blit(score_text, (GRID_WIDTH * BLOCK_SIZE + 10, 10))

        pygame.display.update()

    pygame.quit()

if __name__ == "__main__":
    main()
